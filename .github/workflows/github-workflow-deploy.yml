name: Deploy GIS Microclimate Platform

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggers

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build and deploy the application
  build-and-deploy:
    runs-on: ubuntu-latest
    
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for proper builds
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests json-minify
        
    - name: Validate API Data Structure
      run: |
        python -c "
        import os
        import json
        import sys
        from pathlib import Path
        
        # Validate API data files
        api_paths = [
            'api/data/wind_simulation/current.json',
            'api/data/wind_simulation/metadata.json'
        ]
        
        for path in api_paths:
            if os.path.exists(path):
                try:
                    with open(path, 'r') as f:
                        data = json.load(f)
                    print(f'‚úÖ Valid JSON: {path}')
                except json.JSONDecodeError as e:
                    print(f'‚ùå Invalid JSON in {path}: {e}')
                    sys.exit(1)
            else:
                print(f'‚ö†Ô∏è  Missing API file: {path}')
        
        print('üìä API validation complete')
        "
    
    - name: Optimize Assets
      run: |
        # Create optimized build directory
        mkdir -p dist
        
        # Copy and optimize web assets
        cp -r web/* dist/
        
        # Copy API data
        if [ -d "api" ]; then
          cp -r api dist/
        fi
        
        # Create fallback API data if missing
        mkdir -p dist/api/data/wind_simulation
        
        if [ ! -f "dist/api/data/wind_simulation/current.json" ]; then
          cat > dist/api/data/wind_simulation/current.json << 'EOF'
        {
          "metadata": {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "module": "wind_simulation",
            "version": "1.0.0",
            "computation_time": 45.2,
            "source": "fallback-data"
          },
          "grid_properties": {
            "width": 850,
            "height": 680,
            "bounds": [[54.15, 19.35], [54.17, 19.45]],
            "obstacle_count": 1250
          },
          "flow_statistics": {
            "min_magnitude": 0.2,
            "max_magnitude": 8.5,
            "mean_magnitude": 3.8,
            "std_magnitude": 1.9
          },
          "weather_conditions": {
            "wind_speed_ms": 4.2,
            "wind_direction_deg": 225,
            "temperature_c": 18.5,
            "humidity_percent": 65,
            "source": "fallback"
          },
          "vector_field": [
            {"x": 50, "y": 100, "vx": 2.1, "vy": 3.4, "magnitude": 4.0},
            {"x": 100, "y": 100, "vx": 1.8, "vy": 2.9, "magnitude": 3.4},
            {"x": 150, "y": 100, "vx": 3.2, "vy": 1.1, "magnitude": 3.4}
          ]
        }
        EOF
        fi
        
        echo "üì¶ Assets optimized"
        
    - name: Generate Build Info
      run: |
        # Create build information
        cat > dist/build-info.json << EOF
        {
          "buildTime": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "commit": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "repository": "${{ github.repository }}",
          "workflow": "${{ github.workflow }}",
          "actor": "${{ github.actor }}"
        }
        EOF
        
        echo "üèóÔ∏è  Build info generated"
        
    - name: Security Headers
      run: |
        # Create .htaccess for security headers (if using Apache)
        cat > dist/.htaccess << 'EOF'
        # Security Headers
        Header always set X-Frame-Options "DENY"
        Header always set X-Content-Type-Options "nosniff"
        Header always set X-XSS-Protection "1; mode=block"
        Header always set Referrer-Policy "strict-origin-when-cross-origin"
        Header always set Permissions-Policy "geolocation=(), microphone=(), camera=()"
        
        # Enable CORS for API endpoints
        <FilesMatch "\.(json)$">
            Header set Access-Control-Allow-Origin "*"
            Header set Access-Control-Allow-Methods "GET, OPTIONS"
            Header set Access-Control-Allow-Headers "Content-Type"
        </FilesMatch>
        
        # Cache Control
        <filesMatch "\.(css|js)$">
            ExpiresActive on
            ExpiresDefault "access plus 1 month"
        </filesMatch>
        
        <filesMatch "\.(json)$">
            ExpiresActive on
            ExpiresDefault "access plus 5 minutes"
        </filesMatch>
        EOF
        
        echo "üîí Security headers configured"
        
    - name: Performance Optimization
      run: |
        # Minify CSS (basic version)
        if command -v npx &> /dev/null; then
          npx clean-css-cli -o dist/style.min.css dist/style.css 2>/dev/null || cp dist/style.css dist/style.min.css
        else
          cp dist/style.css dist/style.min.css
        fi
        
        # Create performance manifest
        cat > dist/performance.json << EOF
        {
          "version": "1.0.0",
          "optimizations": {
            "cssMinified": true,
            "cacheHeaders": true,
            "securityHeaders": true
          },
          "metrics": {
            "buildTime": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
        }
        EOF
        
        echo "‚ö° Performance optimizations complete"
        
    - name: Setup GitHub Pages
      uses: actions/configure-pages@v4
      
    - name: Upload Pages Artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./dist
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: Deployment Summary
      run: |
        echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| üåê **URL** | ${{ steps.deployment.outputs.page_url }} |" >> $GITHUB_STEP_SUMMARY
        echo "| üìÖ **Deploy Time** | $(date -u +%Y-%m-%dT%H:%M:%SZ) |" >> $GITHUB_STEP_SUMMARY
        echo "| üî® **Commit** | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
        echo "| üåø **Branch** | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
        echo "| üë§ **Actor** | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üéØ Professional Features Deployed:" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ **Wind Analysis Module** - Interactive LBM simulation visualization" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ **Real-time Dashboard** - Professional system monitoring" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ **GitHub API Integration** - Live data loading from Colab" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ **Professional UI** - Scalgo-inspired engineering interface" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ **Responsive Design** - Desktop, tablet, mobile support" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üéâ **Platform ready for professional use!**" >> $GITHUB_STEP_SUMMARY

  # Notify on deployment status
  notify:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Deployment Status
      run: |
        if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
          echo "‚úÖ Deployment successful!"
          echo "üåê Application available at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
        else
          echo "‚ùå Deployment failed!"
          exit 1
        fi